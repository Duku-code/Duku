{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.10","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":4748798,"sourceType":"datasetVersion","datasetId":2716794}],"dockerImageVersionId":30513,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nos.chdir('/kaggle/input/')\nos.listdir()","metadata":{"execution":{"iopub.status.busy":"2023-06-22T14:37:59.239596Z","iopub.execute_input":"2023-06-22T14:37:59.240049Z","iopub.status.idle":"2023-06-22T14:37:59.248442Z","shell.execute_reply.started":"2023-06-22T14:37:59.240016Z","shell.execute_reply":"2023-06-22T14:37:59.247358Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import tensorflow as tf\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom tensorflow import keras\nfrom keras import layers\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Activation, Dropout, Flatten, Dense\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D\nfrom tensorflow.keras.utils import image_dataset_from_directory\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img\nfrom tensorflow.keras.preprocessing import image_dataset_from_directory\n  \nimport os\nimport matplotlib.image as mpimg","metadata":{"execution":{"iopub.status.busy":"2023-06-22T14:38:57.601037Z","iopub.execute_input":"2023-06-22T14:38:57.601447Z","iopub.status.idle":"2023-06-22T14:38:57.609531Z","shell.execute_reply.started":"2023-06-22T14:38:57.601417Z","shell.execute_reply":"2023-06-22T14:38:57.608411Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data_path = '/kaggle/input/cats-and-dogs-image-classification/train'\nclasses = os.listdir(data_path)\nclasses","metadata":{"execution":{"iopub.status.busy":"2023-06-22T14:42:34.109048Z","iopub.execute_input":"2023-06-22T14:42:34.109473Z","iopub.status.idle":"2023-06-22T14:42:34.118308Z","shell.execute_reply.started":"2023-06-22T14:42:34.109440Z","shell.execute_reply":"2023-06-22T14:42:34.117261Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"ig = plt.gcf()\nplt.figure(figsize=(16, 16))\n  \ncat_dir = os.path.join('/kaggle/input/cats-and-dogs-image-classification/train/dogs')\ndog_dir = os.path.join('/kaggle/input/cats-and-dogs-image-classification/train/cats')\ncat_names = os.listdir(cat_dir)\ndog_names = os.listdir(dog_dir)\n  \npic_index = 210\n  \ncat_images = [os.path.join(cat_dir, fname)\n              for fname in cat_names[pic_index-8:pic_index]]\ndog_images = [os.path.join(dog_dir, fname)\n              for fname in dog_names[pic_index-8:pic_index]]\n  \nfor i, img_path in enumerate(cat_images + dog_images):\n    sp = plt.subplot(4, 4, i+1)\n    sp.axis('Off')\n  \n    img = mpimg.imread(img_path)\n    plt.imshow(img)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-06-22T14:45:08.725178Z","iopub.execute_input":"2023-06-22T14:45:08.726024Z","iopub.status.idle":"2023-06-22T14:45:12.362256Z","shell.execute_reply.started":"2023-06-22T14:45:08.725985Z","shell.execute_reply":"2023-06-22T14:45:12.360953Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"base_dir = '/kaggle/input/cats-and-dogs-image-classification'\n  \n# Create datasets\ntrain_datagen = image_dataset_from_directory(base_dir,\n                                                  image_size=(200,200),\n                                                  subset='training',\n                                                  seed = 1,\n                                                 validation_split=0.1,\n                                                  batch_size= 32)\ntest_datagen = image_dataset_from_directory(base_dir,\n                                                  image_size=(200,200),\n                                                  subset='validation',\n                                                  seed = 1,\n                                                 validation_split=0.1,\n                                                  batch_size= 32)","metadata":{"execution":{"iopub.status.busy":"2023-06-22T14:46:20.114097Z","iopub.execute_input":"2023-06-22T14:46:20.114526Z","iopub.status.idle":"2023-06-22T14:46:20.782319Z","shell.execute_reply.started":"2023-06-22T14:46:20.114493Z","shell.execute_reply":"2023-06-22T14:46:20.781138Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\nmodel = tf.keras.models.Sequential([\n    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(200, 200, 3)),\n    layers.MaxPooling2D(2, 2),\n    layers.Conv2D(64, (3, 3), activation='relu'),\n    layers.MaxPooling2D(2, 2),\n    layers.Conv2D(64, (3, 3), activation='relu'),\n    layers.MaxPooling2D(2, 2),\n    layers.Conv2D(64, (3, 3), activation='relu'),\n    layers.MaxPooling2D(2, 2),\n  \n    layers.Flatten(),\n    layers.Dense(512, activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dense(512, activation='relu'),\n    layers.Dropout(0.1),\n    layers.BatchNormalization(),\n    layers.Dense(512, activation='relu'),\n    layers.Dropout(0.2),\n    layers.BatchNormalization(),\n    layers.Dense(1, activation='sigmoid')\n])\n\nmodel.summary()","metadata":{"execution":{"iopub.status.busy":"2023-06-22T14:47:13.976799Z","iopub.execute_input":"2023-06-22T14:47:13.977288Z","iopub.status.idle":"2023-06-22T14:47:14.254807Z","shell.execute_reply.started":"2023-06-22T14:47:13.977250Z","shell.execute_reply":"2023-06-22T14:47:14.253715Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\nmodel.compile(\n    loss='binary_crossentropy',\n    optimizer='adam',\n    metrics=['accuracy']\n)","metadata":{"execution":{"iopub.status.busy":"2023-06-22T14:48:19.580560Z","iopub.execute_input":"2023-06-22T14:48:19.580961Z","iopub.status.idle":"2023-06-22T14:48:19.594871Z","shell.execute_reply.started":"2023-06-22T14:48:19.580927Z","shell.execute_reply":"2023-06-22T14:48:19.593791Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"history = model.fit(train_datagen,\n          epochs=10,\n          validation_data=test_datagen)","metadata":{"execution":{"iopub.status.busy":"2023-06-22T14:48:33.394913Z","iopub.execute_input":"2023-06-22T14:48:33.395321Z","iopub.status.idle":"2023-06-22T14:51:15.612801Z","shell.execute_reply.started":"2023-06-22T14:48:33.395290Z","shell.execute_reply":"2023-06-22T14:51:15.610986Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"history_df = pd.DataFrame(history_.history)\nhistory_df.loc[:, ['loss', 'val_loss']].plot()\nhistory_df.loc[:, ['accuracy', 'val_accuracy']].plot()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-06-22T14:51:32.448952Z","iopub.execute_input":"2023-06-22T14:51:32.449385Z","iopub.status.idle":"2023-06-22T14:51:32.499114Z","shell.execute_reply.started":"2023-06-22T14:51:32.449350Z","shell.execute_reply":"2023-06-22T14:51:32.497464Z"},"trusted":true},"execution_count":null,"outputs":[]}]}